apiVersion: v1
kind: Pod
metadata:
  annotations:
    co.elastic.logs/module: kibana
  creationTimestamp: "2020-09-27T21:59:35Z"
  generateName: kibana-kb-69cf7dd7d6-
  labels:
    common.k8s.elastic.co/type: kibana
    kibana.k8s.elastic.co/config-checksum: 4215919e50d6e45ca03b8ff894ea14cc140d8d9328007a4cfe77744a
    kibana.k8s.elastic.co/name: kibana
    kibana.k8s.elastic.co/version: 7.9.2
    pod-template-hash: 69cf7dd7d6
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:co.elastic.logs/module: {}
        f:generateName: {}
        f:labels:
          .: {}
          f:common.k8s.elastic.co/type: {}
          f:kibana.k8s.elastic.co/config-checksum: {}
          f:kibana.k8s.elastic.co/name: {}
          f:kibana.k8s.elastic.co/version: {}
          f:pod-template-hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"900a5359-4c5a-4f36-a41a-f9215aec4011"}:
            .: {}
            f:apiVersion: {}
            f:blockOwnerDeletion: {}
            f:controller: {}
            f:kind: {}
            f:name: {}
            f:uid: {}
      f:spec:
        f:automountServiceAccountToken: {}
        f:containers:
          k:{"name":"kibana"}:
            .: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":5601,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:name: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources:
              .: {}
              f:limits:
                .: {}
                f:cpu: {}
                f:memory: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/mnt/elastic-internal/kibana-config"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/usr/share/kibana/config"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/usr/share/kibana/config/elasticsearch-certs"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/usr/share/kibana/data"}:
                .: {}
                f:mountPath: {}
                f:name: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:initContainers:
          .: {}
          k:{"name":"elastic-internal-init-config"}:
            .: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"POD_IP"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef:
                    .: {}
                    f:apiVersion: {}
                    f:fieldPath: {}
              k:{"name":"POD_NAME"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef:
                    .: {}
                    f:apiVersion: {}
                    f:fieldPath: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:limits:
                .: {}
                f:cpu: {}
                f:memory: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:securityContext:
              .: {}
              f:privileged: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/mnt/elastic-internal/kibana-config"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/mnt/elastic-internal/kibana-config-local"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/usr/share/kibana/config/elasticsearch-certs"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
              k:{"mountPath":"/usr/share/kibana/data"}:
                .: {}
                f:mountPath: {}
                f:name: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
        f:volumes:
          .: {}
          k:{"name":"elastic-internal-kibana-config"}:
            .: {}
            f:name: {}
            f:secret:
              .: {}
              f:defaultMode: {}
              f:optional: {}
              f:secretName: {}
          k:{"name":"elastic-internal-kibana-config-local"}:
            .: {}
            f:emptyDir: {}
            f:name: {}
          k:{"name":"elasticsearch-certs"}:
            .: {}
            f:name: {}
            f:secret:
              .: {}
              f:defaultMode: {}
              f:optional: {}
              f:secretName: {}
          k:{"name":"kibana-data"}:
            .: {}
            f:emptyDir: {}
            f:name: {}
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:initContainerStatuses: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.42.1.15"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: k3s
    operation: Update
    time: "2020-09-27T21:59:38Z"
  name: kibana-kb-69cf7dd7d6-th5zd
  namespace: elk
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: kibana-kb-69cf7dd7d6
    uid: 900a5359-4c5a-4f36-a41a-f9215aec4011
  resourceVersion: "201948"
  selfLink: /api/v1/namespaces/elk/pods/kibana-kb-69cf7dd7d6-th5zd
  uid: 9c9b9057-9424-4148-9eaf-f3e124c295fb
spec:
  automountServiceAccountToken: false
  containers:
  - image: docker.elastic.co/kibana/kibana:7.9.2
    imagePullPolicy: IfNotPresent
    name: kibana
    ports:
    - containerPort: 5601
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /login
        port: 5601
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits:
        cpu: "2"
        memory: 3Gi
      requests:
        cpu: 500m
        memory: 1Gi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /mnt/elastic-internal/kibana-config
      name: elastic-internal-kibana-config
      readOnly: true
    - mountPath: /usr/share/kibana/config
      name: elastic-internal-kibana-config-local
    - mountPath: /usr/share/kibana/config/elasticsearch-certs
      name: elasticsearch-certs
      readOnly: true
    - mountPath: /usr/share/kibana/data
      name: kibana-data
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  initContainers:
  - command:
    - /usr/bin/env
    - bash
    - -c
    - "#!/usr/bin/env bash\nset -eux\n\ninit_config_initialized_flag=/usr/share/kibana/config/elastic-internal-init-config.ok\n\nif
      [[ -f \"${init_config_initialized_flag}\" ]]; then\n    echo \"Kibana configuration
      already initialized.\"\n\texit 0\nfi\n\necho \"Setup Kibana configuration\"\n\nln
      -sf /mnt/elastic-internal/kibana-config/* /mnt/elastic-internal/kibana-config-local/\n\ntouch
      \"${init_config_initialized_flag}\"\necho \"Kibana configuration successfully
      prepared.\"\n"
    env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: docker.elastic.co/kibana/kibana:7.9.2
    imagePullPolicy: IfNotPresent
    name: elastic-internal-init-config
    resources:
      limits:
        cpu: 100m
        memory: 50Mi
      requests:
        cpu: 100m
        memory: 50Mi
    securityContext:
      privileged: false
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /mnt/elastic-internal/kibana-config-local
      name: elastic-internal-kibana-config-local
    - mountPath: /mnt/elastic-internal/kibana-config
      name: elastic-internal-kibana-config
      readOnly: true
    - mountPath: /usr/share/kibana/config/elasticsearch-certs
      name: elasticsearch-certs
      readOnly: true
    - mountPath: /usr/share/kibana/data
      name: kibana-data
  nodeName: srv02
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: elastic-internal-kibana-config
    secret:
      defaultMode: 420
      optional: false
      secretName: kibana-kb-config
  - emptyDir: {}
    name: elastic-internal-kibana-config-local
  - name: elasticsearch-certs
    secret:
      defaultMode: 420
      optional: false
      secretName: kibana-kb-es-ca
  - emptyDir: {}
    name: kibana-data
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-09-27T21:59:37Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-09-27T21:59:35Z"
    message: 'containers with unready status: [kibana]'
    reason: ContainersNotReady
    status: "False"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-09-27T21:59:35Z"
    message: 'containers with unready status: [kibana]'
    reason: ContainersNotReady
    status: "False"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-09-27T21:59:35Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://be6ea094a431d9b1717eda7d54aa0a68d591c769bb084be0c40553521a18b1ba
    image: docker.elastic.co/kibana/kibana:7.9.2
    imageID: docker-pullable://docker.elastic.co/kibana/kibana@sha256:48d7d2e91b7903321748432e22a01576c7e4db539021836b54bd58d5659aa5e5
    lastState: {}
    name: kibana
    ready: false
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-09-27T21:59:37Z"
  hostIP: 192.168.1.13
  initContainerStatuses:
  - containerID: docker://7d4f8407bbf3a61fb8d4c99ec375c7b57ddc60b85eaf51a103c518d39e0b42c1
    image: docker.elastic.co/kibana/kibana:7.9.2
    imageID: docker-pullable://docker.elastic.co/kibana/kibana@sha256:48d7d2e91b7903321748432e22a01576c7e4db539021836b54bd58d5659aa5e5
    lastState: {}
    name: elastic-internal-init-config
    ready: true
    restartCount: 0
    state:
      terminated:
        containerID: docker://7d4f8407bbf3a61fb8d4c99ec375c7b57ddc60b85eaf51a103c518d39e0b42c1
        exitCode: 0
        finishedAt: "2020-09-27T21:59:36Z"
        reason: Completed
        startedAt: "2020-09-27T21:59:36Z"
  phase: Running
  podIP: 10.42.1.15
  podIPs:
  - ip: 10.42.1.15
  qosClass: Burstable
  startTime: "2020-09-27T21:59:35Z"
